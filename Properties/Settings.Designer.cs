//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------




//INSTANT C# NOTE: Formerly VB project-level imports:
using System.Threading.Tasks;
using System.Linq;
using System.Xml.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Shapes;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;

namespace Ink
{
	namespace Properties
	{
		[System.Runtime.CompilerServices.CompilerGeneratedAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0"), System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal sealed partial class Settings : System.Configuration.ApplicationSettingsBase
		{
			private static Settings defaultInstance = (Settings)System.Configuration.ApplicationSettingsBase.Synchronized(new Settings());
	
	#region My.Settings 自动保存功能
	#if WINDOWSFORMS
			private static bool addedHandler;
	
			private static object addedHandlerLockObject = new object();
	
			[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
			private static void AutoSaveSettings(System.Object sender, System.EventArgs e)
			{
				if (My.MyWpfExtension.Application.SaveMySettingsOnExit)
				{
					defaultInstance.Save();
				}
			}
	#endif
	#endregion
	
			public static Settings Default
			{
				get
				{
	
	#if WINDOWSFORMS
					   if (!addedHandler)
					   {
							lock (addedHandlerLockObject)
							{
								if (!addedHandler)
								{
									My.MyWpfExtension.Application.Shutdown += new Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler(AutoSaveSettings);
									addedHandler = true;
								}
							}
						}
	#endif
					return defaultInstance;
				}
			}
		}
	}

//INSTANT C# NOTE: This block was only required to support 'My.Settings' in VB. 'Properties.Settings' is used in C#:
//Namespace My
//
//	<Microsoft.VisualBasic.HideModuleNameAttribute(), System.Diagnostics.DebuggerNonUserCodeAttribute(), System.Runtime.CompilerServices.CompilerGeneratedAttribute()> Friend Module MySettingsProperty
//
//		<System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")> Friend ReadOnly Property Settings() As global::Ink.MySettings
//			Get
//				return global::Ink.MySettings.Default
//			End Get
//		End Property
//	End Module
//End Namespace

}